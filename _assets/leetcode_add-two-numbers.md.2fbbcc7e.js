import{e as n,f as s,s as a}from"./common-7f73fe28.js";const t='{"title":"","frontmatter":{},"lastUpdated":1593480285398.3599}';var p={};const o=a('<ol start="2"><li>两数相加</li></ol><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>来源：力扣（LeetCode） 链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener noreferrer">https://leetcode-cn.com/problems/add-two-numbers</a> 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><div class="language-js"><pre><code><span class="token comment">/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */</span>\n<span class="token comment">/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */</span>\n<span class="token comment">// l1 和 l2 都是逆序方式存储的</span>\n<span class="token keyword">var</span> l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> asc1 <span class="token punctuation">,</span> asc2<span class="token punctuation">,</span> l3<span class="token punctuation">,</span> asc3\n<span class="token keyword">var</span> <span class="token function-variable function">addTwoNumbers</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// l1 和 l2 元数据为正序数字</span>\n    asc1 <span class="token operator">=</span> l1<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    asc2 <span class="token operator">=</span> l2<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token comment">// 两数相加之和，为所求值数字类型正序 l3</span>\n    l3 <span class="token operator">=</span>  <span class="token punctuation">(</span> <span class="token function">Number</span><span class="token punctuation">(</span>asc1<span class="token punctuation">)</span> <span class="token operator">+</span>  <span class="token function">Number</span><span class="token punctuation">(</span>asc2<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token comment">// 结果值转为数组且倒序</span>\n    asc3 <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>l3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> asc3 <span class="token punctuation">)</span>\n    <span class="token keyword">return</span> asc3\n  \n  \n\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span>l2<span class="token punctuation">)</span>\n</code></pre></div>',6);p.render=function(a,t){return n(),s("div",null,[o])};export default p;export{t as __pageData};
